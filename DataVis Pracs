DataVis Practicals


Practical 1 : Create one-dimensional data using series and perform various operations on it.


import pandas as pd
ds = pd.Series([2, 4, 6, 8, 10])
print(ds)
#Retrieve 1st element
ds[0]
#Retrieve 1st three element
ds[:3]
#Retrieve last three element
ds[3:]
print('Mean :',ds.mean())
print('Maximum :',ds.max(),'and',' Minimum :',ds.min())
print('Standard deviation :', ds.std())
print('Describe :\n',ds.describe())
#Checking whether an index value is available in a series or not
0 in ds
#checking each value less than 4 or not 
temp = ds<4
temp
temp = ds[ds<6]*2
temp
#addition of series
a = ds.add(ds)
a
#subtraction
a.sub(ds)

----------------------------------------------------------------------------------------------------------------

Practical 2 : Create Two-dimensional data with the help of data frames and perform different operations
on it.


import pandas as pd
dict1 = {'one' : pd.Series([1., 2., 3.],index=['a', 'b', 'c']),
         'two' : pd.Series([1., 2., 3., 4.],
                           index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(dict1)
df
#Add column
df['three'] = df['one'] * df['two']
df['flag'] = df['one'] > 2 
df
#Adding a Column Using a Scalar and Assigning to a Data Frame
df['Filler'] = 'HCT'
df['Slic'] = df['one'][:2]
df
# Delete columns
del df['two']
#alternative code 
Three = df.pop('three')
df
#insert value on index 1
df.insert(1, 'bar', df['one'])
df
#missing value
df.isna()
#summary
df.describe()

------------------------------------------------------------------------------------------------------------------

Practical 3 : Write a code to read data from the different file formats like JSON, HTML, XML, and CSV
files and check for missing data and outlier values and handle them.


#read csv file
import pandas as pd
import numpy as np
df = pd.read_csv('main.csv')
df.head()

#read xml file
df = pd.read_xml('main.xml')
df.head()

import json 
data = '''{
     "name" : "Ossama",
     "phone" : { "type" : "intl", "number" : "+9689902447"},
     "email" : {"hide" : "No" }
     }'''

info = json.loads(data)
print ('Name:',info["name"])
print ('Hide:',info["email"]["hide"])

 input = '''[
 { "id" : "001", "x" : "5", "name" : "Ossama"} ,
 { "id" : "009","x" : "10","name" : "Omar" }
 ]'''
info = json.loads(input) 
print ('User count:',len(info)) 
for item in info:
    print ('\nName', item['name'])
    print ('Id', item['id'])
    print ('Attribute', item['x'])
    
import urllib.request
url=' http://python-data.dr-chuck.net/comments_244984.json'
print ('Retrieving', url)
uh = urllib.request.urlopen(url)
data = uh.read()
print(data)

import json
with open('comments.json') as data:
     JSONdta = json.load(data)
print(JSONdta)

sumv=0
counter=0
for i in range(len(JSONdta["comments"])):
    counter+=1
    Name = JSONdta["comments"][i]["name"]
    Count = JSONdta["comments"][i]["count"]
    sumv+=int(Count)
print (Name," ", Count)
print ("\nCount: ", counter)
print ("Sum: ", sumv)

# using isnull() function 
df.isnull().sum()

# filling missing value using fillna() 
df.fillna(0)

# will replace  Nan value in dataframe with value -99 
df.replace(to_replace = np.nan, value = -99)

# using dropna() function 
df.dropna()

#drop a columns which have at least 1 missing values
df.dropna(axis = 1)

# Outlier in data
# Importing
import sklearn
from sklearn.datasets import load_boston
import pandas as pd
import matplotlib.pyplot as plt
 
# Load the dataset
bos_hou = load_boston()
 
# Create the dataframe
column_name = bos_hou.feature_names
df_boston = pd.DataFrame(bos_hou.data)
df_boston.columns = column_name
df_boston.head()

# Box Plot
import seaborn as sns
sns.boxplot(df_boston['DIS'])

# Scatter plot
fig, ax = plt.subplots(figsize = (18,10))
ax.scatter(df_boston['INDUS'], df_boston['TAX'])
 
# x-axis label
ax.set_xlabel('(Proportion non-retail business acres)/(town)')
 
# y-axis label
ax.set_ylabel('(Full-value property-tax rate)/( $10,000)')
plt.show()

--------------------------------------------------------------------------------------------------------------------------

Practical 4 : Perform Reshaping of the hierarchical data and pivoting data frame data.


# importing pandas as pd
import pandas as pd
  
# creating a dataframe
df = pd.DataFrame({'A': ['John', 'Boby', 'Mina'],
      'B': ['Masters', 'Graduate', 'Graduate'],
      'C': [27, 23, 21]})
  
df
# values can be an object or a list
df.pivot('A', 'B', 'C')
# value is a list
df.pivot(index ='A', columns ='B', values =['C', 'A'])
#creating a dataframe
df = pd.DataFrame({'A': ['John', 'John', 'Mina'],
      'B': ['Masters', 'Masters', 'Graduate'],
      'C': [27, 23, 21]})
  
df.pivot('A', 'B', 'C')


